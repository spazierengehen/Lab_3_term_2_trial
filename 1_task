#include <vector>
#include<iostream>
#define _USE_MATH_DEFINES
#include<cmath>
#include<math.h>
using namespace std;


class Cylinder {
	double H;

public:
	Cylinder(double H2) {
		H = H2;
}
	virtual double square() = 0;
	double volume() { return( square()*H); }
};



class RoundCylinder :public Cylinder{
	double R;
public:
	RoundCylinder(double H1, double R1) :Cylinder(H1) { R = R1; }
    double square() override {
		return(M_PI * pow(R, 2));
	}
};

class RectanglePrizm :public Cylinder{
    double a;
	double b;
public:
	RectanglePrizm(double H3, double a1, double b1) :Cylinder(H3) {
		a = a1;
		b = b1;
	}
	double square() override {
		return (a * b);
	}

};


void printInfo(Cylinder &obg) {
	
	cout << "Volume of the shape equals: " << obg.volume()<<endl;
}


int main() {
	RoundCylinder C1(3, 6);
	printInfo(C1);
	RectanglePrizm C2(3, 6, 2);
	printInfo(C2);
	cout << "------------" << endl;
	int N = 10;
	vector<Cylinder*> figure_array(N);
	for (int i = 0; i < N; i++)
	{
		if (rand() % 2 == 1)
			figure_array[i] = new RoundCylinder(i + 5, rand() % 5 + 2);
		else
			figure_array[i] = new RectanglePrizm(i + 5, rand() % 5 + 2,
				rand() % 3 + 1);
	}
	for (auto f : figure_array)
		printInfo(*f);
	for (auto& f : figure_array)
		delete f;

	return 0;
}
